package com.github.oberdiah.deepcomplexity.evaluation

import com.github.oberdiah.deepcomplexity.staticAnalysis.SetIndicator
import com.intellij.psi.PsiElement

/**
 * If [temporary] is true this key will be removed from the context
 * after stacking. This is useful for tidying up keys that are only
 * added to aid resolution, such as parameters and `this`.
 */
sealed class Key() {
    abstract val ind: SetIndicator<*>

    /**
     * Used to allow us to equate expressions.
     */
    data class ExpressionKey(val expr: Expr<*>) : Key() {
        override val ind: SetIndicator<*>
            get() = expr.ind

        override fun toString(): String = ExprToString.toExprKeyString(expr)
    }

    object EphemeralKey : Key() {
        override val ind: SetIndicator<*>
            get() = throw IllegalStateException("Ephemeral keys don't have a type.")

        override fun toString(): String = "E"

        fun new(): EphemeralKey {
            return EphemeralKey
        }
    }

    fun isAutogenerated(): Boolean = isEphemeral() || isExpr()
    fun isEphemeral(): Boolean = this is EphemeralKey
    fun isExpr(): Boolean = this is ExpressionKey
    open fun isNewlyCreated(): Boolean = false

    /**
     * When multiplying, we need to decide which one gets to live on.
     */
    fun importance(): Int {
        return when (this) {
            is VariableKey -> 6
            is QualifiedKey -> 5
            is ThisKey -> 4
            is ReturnKey -> 2
            is ExpressionKey -> 1
            is EphemeralKey -> 0
            is PlaceholderKey -> 0
        }
    }

    /**
     * If the key is a variable (i.e. a Local Variable, Field, etc.), returns the variable.
     * If the key is a return statement, returns the method we're returning from.
     */
    fun getElement(): PsiElement {
        return when (this) {
            is VariableKey -> variable
            is QualifiedKey -> field.getElement()
            is ThisKey -> throw IllegalArgumentException("Cannot get element of this key")
            is PlaceholderKey -> throw IllegalArgumentException("Cannot get element of placeholder key")
            is ReturnKey -> throw IllegalArgumentException("Cannot get element of return key")
            is EphemeralKey -> throw IllegalArgumentException("Cannot get element of arbitrary key")
            is ExpressionKey -> throw IllegalArgumentException("Cannot get element of expression key")
        }
    }

    fun matchesElement(element: PsiElement): Boolean {
        return getElement() == element
    }
}