package com.github.oberdiah.deepcomplexity.evaluation

import com.github.oberdiah.deepcomplexity.evaluation.Context.Key
import com.github.oberdiah.deepcomplexity.staticAnalysis.DoubleSetIndicator
import com.github.oberdiah.deepcomplexity.staticAnalysis.GenericSetIndicator
import com.github.oberdiah.deepcomplexity.staticAnalysis.SetIndicator
import com.github.oberdiah.deepcomplexity.staticAnalysis.constrainedSets.Bundle
import com.github.oberdiah.deepcomplexity.utilities.Utilities
import com.github.oberdiah.deepcomplexity.utilities.Utilities.toStringPretty
import com.intellij.psi.*

typealias Vars = Map<Key, Expr<*>>

class Context private constructor(
    val variables: Vars,
) {
    sealed class Key {
        abstract class VariableKey() : Key() {
            abstract val variable: PsiVariable
        }

        data class LocalVariableKey(override val variable: PsiLocalVariable) : VariableKey() {
            override fun toString(): String = variable.toStringPretty()
        }

        data class ParameterKey(override val variable: PsiParameter) : VariableKey() {
            override fun toString(): String = variable.toStringPretty()
        }

        data class FieldKey(override val variable: PsiField, val qualifier: Key = HeapKey.This) : VariableKey() {
            override fun toString(): String = "$qualifier.${variable.toStringPretty()}"
        }

        data class HeapKey(val key: EphemeralKey) : Key() {
            companion object {
                fun new(): HeapKey {
                    return HeapKey(EphemeralKey.new())
                }

                val This = HeapKey(EphemeralKey.new())
            }

            override fun toString(): String = if (this == This) "this" else "$key"
        }

        data class ReturnKey(val type: SetIndicator<*>) : Key() {
            companion object {
                val Me = ReturnKey(DoubleSetIndicator)
            }

            override fun toString(): String = "Return value"
            override fun hashCode(): Int = 0
            override fun equals(other: Any?): Boolean = other is ReturnKey
        }

        /**
         * Used to allow us to equate expressions.
         */
        data class ExpressionKey(val expr: Expr<*>) : Key() {
            override fun toString(): String = ExprToString.toExprKeyString(expr)
        }

        /**
         * Primarily for testing, doesn't have a specific element.
         */
        data class EphemeralKey(val key: Any) : Key() {
            override fun toString(): String = "#$key"

            companion object {
                private var KEY_INDEX = 0
                fun new(): EphemeralKey {
                    return EphemeralKey(KEY_INDEX++)
                }
            }
        }

        open val ind: SetIndicator<*>
            get() {
                return when (this) {
                    is ExpressionKey -> this.expr.ind
                    is ReturnKey -> type
                    is VariableKey -> Utilities.psiTypeToSetIndicator(variable.type)
                    is HeapKey -> GenericSetIndicator(Any::class)
                    else -> throw IllegalArgumentException("Cannot get indicator for $this")
                }
            }

        fun isAutogenerated(): Boolean = isEphemeral() || isExpr()
        fun isEphemeral(): Boolean = this is EphemeralKey
        fun isExpr(): Boolean = this is ExpressionKey
        fun canBeResolvedWithThis(): Boolean =
            this == HeapKey.This || this is FieldKey && this.qualifier.canBeResolvedWithThis()

        /**
         * When multiplying, we need to decide which one gets to live on.
         */
        fun importance(): Int {
            return when (this) {
                is VariableKey -> 4
                is HeapKey -> 3
                is ReturnKey -> 2
                is ExpressionKey -> 1
                is EphemeralKey -> 0
            }
        }

        /**
         * If the key is a variable (i.e. a Local Variable, Field, etc.), returns the variable.
         * If the key is a return statement, returns the method we're returning from.
         */
        fun getElement(): PsiElement {
            return when (this) {
                is VariableKey -> variable
                is HeapKey -> throw IllegalArgumentException("Cannot get element of heap key")
                is ReturnKey -> throw IllegalArgumentException("Cannot get element of return key")
                is EphemeralKey -> throw IllegalArgumentException("Cannot get element of arbitrary key")
                is ExpressionKey -> throw IllegalArgumentException("Cannot get element of expression key")
            }
        }

        fun matchesElement(element: PsiElement): Boolean {
            return getElement() == element
        }
    }

    companion object {
        /**
         * You won't want this often, in nearly all cases it makes sense
         * to inherit the existing context via cloning.
         */
        fun brandNew(): Context = Context(emptyMap())

        /**
         * Combines two contexts at the same 'point in time' e.g. a branching if statement.
         * This does not and cannot resolve any unresolved expressions as these two statements
         * are independent of each other.
         *
         * You must define how to resolve conflicts.
         */
        fun combine(a: Context, b: Context, how: (a: Expr<*>, b: Expr<*>) -> Expr<*>): Context {
            fun mergeMaps(a: Vars, b: Vars, how: (a: Expr<*>, b: Expr<*>) -> Expr<*>): Vars =
                (a.keys + b.keys)
                    .associateWith { key ->
                        val aVal = a[key] ?: VariableExpression<Any>(key)
                        val bVal = b[key] ?: VariableExpression<Any>(key)
                        // This equality is probably not very cheap.
                        // I'm sure that can be improved in the future.
                        if (aVal == bVal) {
                            aVal
                        } else {
                            how(aVal, bVal)
                        }
                    }

            // Merge the variables.
            val newVariables = mergeMaps(a.variables, b.variables, how)

            return Context(newVariables)
        }
    }

    val returnValue: Expr<*>?
        get() = variables[Key.ReturnKey.Me]

    override fun toString(): String {
        val variablesString =
            variables.entries.joinToString("\n") { entry ->
                val expr = entry.value
                val key = entry.key

                "$key:\n${expr.toString().prependIndent()}"
            }
        return "Context: {\n${variablesString.prependIndent()}\n}"
    }

    fun clone(): Context = Context(variables)

    fun debugKey(key: Key): String {
        return variables[key]?.dStr() ?: "Key not found"
    }

    fun canResolve(variable: VariableExpression<*>): Boolean {
        return variables.containsKey(variable.key)
    }

    fun evaluateKey(key: Key): Bundle<*> {
        val expr = variables[key] ?: throw IllegalArgumentException("Key $key not found in context")
        return expr.evaluate(ExprEvaluate.Scope())
    }

    fun getVar(element: Key): Expr<*> {
        return variables[element] ?: VariableExpression<Any>(element)
    }

    /**
     * Performs a cast if necessary.
     */
    fun withVar(lExpr: LValueExpr<*>, rExpr: Expr<*>): Context {
        assert(rExpr.iterateTree().none { it is LValueExpr<*> }) {
            "Cannot assign an LValueExpr to a variable: $lExpr = $rExpr. Try using `.resolveLValues(context)` on it first."
        }

        if (lExpr !is LValueFieldExpr) {
            return withVar(lExpr.key, rExpr)
        }

        /**
         * This does look a bit scary, so I'll try to walk you through it:
         * Essentially, a qualifier may not just be a simple VariableExpression with a HeapKey.
         * In the simplest case it is, and this all becomes a lot easier, but in the general case
         * it may be any complicated expression.
         * Let's go with the following example:
         * ```
         * a = new C(2);
         * b = new C(3);
         * ((x > 0) ? a : b).x = 5
         * ```
         * Now, the only objects we should be touching with our operation are `a` and `b`, so we gather
         * them first into [varKeysInvolved]. That part's simple enough.
         *
         * Then, for the variables we want to modify, we take our qualifier as specified above, and replace
         * `a` and `b` with either:
         *      a) The value already at that object, effectively turning `b` into `b.x`
         *      b) The value that we're setting this field to
         *  depending on whether the object we're modifying is the object being replaced in the expression.
         *
         *  The result of this is that for something like `((x > 0) ? a : b).x = 5`, the variables end up
         *  like so:
         *      `a.x = { (x > 0) ? 5 : 3 }`
         *      `b.x = { (x > 0) ? 2 : 5 }`
         *  which is exactly as desired.
         */

        val qualifier = lExpr.qualifier
        val fieldKey = lExpr.key

        val varKeysInvolved =
            qualifier.iterateTree()
                .filterIsInstance<VariableExpression<*>>()
                .map { it.key }
                .filterIsInstance<Key.HeapKey>()
                .toSet()

        val newVariables = variables + varKeysInvolved.map {
            val thisVarKey = Key.FieldKey(fieldKey.variable, it)
            val newValue = qualifier.replaceTypeInLeaves<VariableExpression<*>>(fieldKey.ind) { expr ->
                if (expr.key == it) {
                    rExpr
                } else {
                    getVar(thisVarKey)
                }
            }

            (thisVarKey to newValue)
        }

        return Context(newVariables)
    }

    /**
     * This should only be used externally in special circumstances â€” most of the time
     * you should be using `withVar(lExpr, rExpr)` instead.
     *
     * This will be useful sometimes, though, e.g. setting up return values, declarations, or parameters.
     */
    fun withVar(key: Key, expr: Expr<*>): Context {
        val castVar = expr.castToUsingTypeCast(key.ind, false)
        return Context(variables + (key to castVar))
    }

    /**
     * Performs a cast if necessary.
     */
    fun withResolvedVar(key: Key, expr: Expr<*>): Context {
        val castExpr = expr.castToUsingTypeCast(key.ind, false)

        return Context(variables.mapValues { (_, oldExpr) ->
            oldExpr.replaceTypeInTree<VariableExpression<*>> {
                if (it.key == key) castExpr else null
            }
        })
    }

    /**
     * Resolves all variables in the expression that are known of in this context.
     */
    fun resolveKnownVariables(expr: Expr<*>): Expr<*> =
        expr.replaceTypeInTree<VariableExpression<*>> { variables[it.key] }

    /**
     * Qualify all fields without existing paths in the expression with `thisObj`, effectively
     * defining a 'this' for them.
     */
    fun resolveThis(thisObj: Expr<*>?): Context {
        if (thisObj == null) {
            // If we don't have a 'this' object, we can't resolve anything.
            return this
        }

        val keysToUpdate = variables.filterKeys { it is Key.FieldKey && it.qualifier.canBeResolvedWithThis() }

        var newContext = Context(variables.filterKeys { it !in keysToUpdate })

        for ((key, value) in keysToUpdate) {
            newContext = newContext.withVar(
                LValueFieldExpr<Any>(key as Key.FieldKey, thisObj), value
            )
        }

        // Step 1 complete: We've updated the keys.
        // Now we need to update the 'Variable Expression' values.
        val newVariables = newContext.variables.mapValues {
            it.value.replaceTypeInTree<VariableExpression<*>> { varExpr ->
                if (varExpr.key == Key.HeapKey.This) {
                    // This variable is literally 'this', so we can just return the `thisObj`.
                    thisObj
                } else if (varExpr.key.canBeResolvedWithThis()) {
                    thisObj.getField(brandNew(), varExpr.key as Key.FieldKey)
                } else {
                    null
                }
            }
        }

        return Context(newVariables)
    }

    /**
     * Stacks the later context on top of this one.
     *
     * That is, prioritise the later context and fall back to this one if the key doesn't exist.
     *
     * Conversely, for `Method` keys, this context is prioritised over the later context.
     */
    fun stack(later: Context): Context {
        val laterResolvedWithMe = later.variables.mapValues { (_, expr) -> resolveKnownVariables(expr) }
        val meResolvedWithLater = variables.mapValues { (_, expr) -> later.resolveKnownVariables(expr) }

        val newVariables = mutableMapOf<Key, Expr<*>>()
        // For normal keys, later takes priority and gets to override.
        newVariables.putAll(meResolvedWithLater.filter { it.key !is Key.ReturnKey })
        newVariables.putAll(laterResolvedWithMe.filter { it.key !is Key.ReturnKey })

        // For method keys, this context takes priority.
        newVariables.putAll(laterResolvedWithMe.filter { it.key is Key.ReturnKey })
        newVariables.putAll(meResolvedWithLater.filter { it.key is Key.ReturnKey })

        return Context(newVariables)
    }

    fun withoutReturns(): Context {
        // This is a convenience method to drop all return values from the context.
        return Context(variables.filterKeys { it !is Key.ReturnKey })
    }
}