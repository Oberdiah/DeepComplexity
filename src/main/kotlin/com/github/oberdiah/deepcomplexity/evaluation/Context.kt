package com.github.oberdiah.deepcomplexity.evaluation

import com.github.oberdiah.deepcomplexity.staticAnalysis.SetIndicator
import com.github.oberdiah.deepcomplexity.staticAnalysis.constrainedSets.Bundle
import com.github.oberdiah.deepcomplexity.utilities.Utilities
import com.github.oberdiah.deepcomplexity.utilities.Utilities.toKey
import com.github.oberdiah.deepcomplexity.utilities.Utilities.toStringPretty
import com.intellij.psi.*

class Context private constructor(
    val variables: Map<Key, Expr<*>>,
    val heap: Map<Key.HeapKey, Context>,
    val resolvesTo: Expr<*>,
) {
    sealed class Key {
        abstract class VariableKey<T : PsiVariable>(open val variable: T) : Key() {
            override fun toString(): String = variable.toStringPretty()
        }

        data class LocalVariableKey(override val variable: PsiLocalVariable) : VariableKey<PsiLocalVariable>(variable)
        data class ParameterKey(override val variable: PsiParameter) : VariableKey<PsiParameter>(variable)
        data class FieldKey(override val variable: PsiField) : VariableKey<PsiField>(variable)

        @JvmInline
        value class HeapKey(val key: EphemeralKey) {
            companion object {
                fun new(): HeapKey {
                    return HeapKey(EphemeralKey.new())
                }
            }
        }

        /**
         * This is the key representing a return type itself.
         * It behaves differently to other keys in that it applies backward when stacking.
         *
         * Normally, if you had two contexts in this order:
         *
         * ```
         * { a = if (x > 5) { 0 } else { a } }
         * { a = a + 5 }
         * ```
         *
         * The latter one would inherit the former's variables, and you'd end up with:
         *
         * ```
         * { a = (if (x > 5) { 0 } else { a }) + 5 }
         * ```
         *
         * However, if `a` was instead a `Method`, you'd end up with:
         *
         * ```
         * { a = if (x > 5) { 0 } else { a + 5 } }
         * ```
         * e.g. the rest of the method would get inserted into the context.
         *
         * It has a type associated with it so that we can perform implicit casts to it.
         */
        data class ReturnKey(val type: SetIndicator<*>) : Key() {
            override fun toString(): String = "Rest of method"
        }

        /**
         * Used to allow us to equate expressions.
         */
        data class ExpressionKey(val expr: Expr<*>) : Key() {
            override fun toString(): String = ExprToString.toExprKeyString(expr)
        }

        /**
         * Primarily for testing, doesn't have a specific element.
         */
        data class EphemeralKey(val key: Any) : Key() {
            override fun toString(): String = "#$key"

            companion object {
                var KEY_INDEX = 0
                fun new(): EphemeralKey {
                    return EphemeralKey(KEY_INDEX++)
                }
            }
        }

        open val ind: SetIndicator<*>
            get() {
                return when (this) {
                    is ExpressionKey -> this.expr.ind
                    is ReturnKey -> type
                    is VariableKey<*> -> Utilities.psiTypeToSetIndicator(variable.type)
                    else -> throw IllegalArgumentException("Cannot get indicator for $this")
                }
            }

        fun isAutogenerated(): Boolean = isEphemeral() || isExpr()
        fun isEphemeral(): Boolean = this is EphemeralKey
        fun isReturnKey(): Boolean = this is ReturnKey
        fun isExpr(): Boolean = this is ExpressionKey

        /**
         * When multiplying, we need to decide which one gets to live on.
         */
        fun importance(): Int {
            return when (this) {
                is VariableKey<*> -> 3
                is ReturnKey -> 2
                is ExpressionKey -> 1
                is EphemeralKey -> 0
            }
        }

        /**
         * If the key is a variable (i.e. a Local Variable, Field, etc.), returns the variable.
         * If the key is a return statement, returns the method we're returning from.
         */
        fun getElement(): PsiElement {
            return when (this) {
                is VariableKey<*> -> variable
                is ReturnKey -> throw IllegalArgumentException("Cannot get element of return key")
                is EphemeralKey -> throw IllegalArgumentException("Cannot get element of arbitrary key")
                is ExpressionKey -> throw IllegalArgumentException("Cannot get element of expression key")
            }
        }

        fun matchesElement(element: PsiElement): Boolean {
            return getElement() == element
        }
    }

    companion object {
        fun new(): Context = Context(
            variables = emptyMap(),
            heap = emptyMap(),
            resolvesTo = VoidExpression()
        )

        /**
         * Combines two contexts at the same 'point in time' e.g. a branching if statement.
         * This does not and cannot resolve any unresolved expressions as these two statements
         * are independent of each other.
         *
         * You must define how to resolve conflicts.
         *
         * `a` and `b` (The two contexts) must not be used again after this operation.
         */
        fun combine(a: Context, b: Context, how: (a: Expr<*>, b: Expr<*>) -> Expr<*>): Context {
            val newMap = mutableMapOf<Key, Expr<*>>()

            val allKeys = a.variables.keys + b.variables.keys

            for (key in allKeys) {
                val aVal = a.variables[key] ?: a.getVar(key)
                val bVal = b.variables[key] ?: b.getVar(key)
                newMap[key] = how(aVal, bVal)
            }

            val resolvesTo = when {
                a.resolvesTo is VoidExpression && b.resolvesTo is VoidExpression -> VoidExpression()
                a.resolvesTo is VoidExpression -> b.resolvesTo
                b.resolvesTo is VoidExpression -> a.resolvesTo
                else -> how(a.resolvesTo, b.resolvesTo)
            }

            return Context(
                newMap,
                heap = a.heap + b.heap,
                // I don't believe this matters for if statements in the real world, but it might for
                // the ternary operator.
                resolvesTo = resolvesTo
            )
        }
    }

    override fun toString(): String {
        val variablesString =
            variables.entries.joinToString("\n") { entry ->
                val expr = entry.value
                val key = entry.key

                "$key:\n${expr.toString().prependIndent()}"
            }
        return "Context: {\n${variablesString.prependIndent()}\n}"
    }

    fun debugKey(key: Key): String {
        return variables[key]?.dStr() ?: "Key not found"
    }

    fun canResolve(variable: VariableExpression<*>): Boolean {
        return variables.containsKey(variable.key)
    }

    fun evaluateKey(key: Key): Bundle<*> {
        val expr = variables[key] ?: throw IllegalArgumentException("Key $key not found in context")
        return expr.evaluate(ExprEvaluate.Scope())
    }

    fun getVar(element: Key): Expr<*> {
        return variables[element] ?: VariableExpression<Any>(element)
    }

    fun nowResolvesTo(expr: Expr<*>): Context {
        return Context(variables, heap, expr)
    }

    /**
     * Performs a cast if necessary.
     */
    fun withVar(context: Context, lExpr: Expr<*>, rExpr: Expr<*>): Context {
        assert(rExpr.iterateTree().none { it is LValueExpr<*> }) {
            "Cannot assign an LValueExpr to a variable: $lExpr = $rExpr. Try using `.resolveLValues(context)` on it first."
        }

        if (lExpr !is LValueExpr) {
            throw IllegalArgumentException(
                "Cannot assign to a non-LValueExpr: $lExpr = $rExpr."
            )
        }

        val qualifier = lExpr.qualifier
        if (qualifier == null) {
            return withVar(lExpr.key, rExpr)
        }

        if (qualifier is ClassExpr) {
            val heapContext = context.heap[qualifier.heapKey]
                ?: throw IllegalArgumentException("No heap context found for class expression: $qualifier")

            val newHeapContext = heapContext.withVar(lExpr.key, rExpr)
            
            return Context(
                variables,
                heap = context.heap + (qualifier.heapKey to newHeapContext),
                resolvesTo = resolvesTo
            )
        } else {
            TODO()
        }
    }

    /**
     * This should only be used externally in special circumstances â€” most of the time
     * you should be using `withVar(lExpr, rExpr)` instead.
     *
     * This will be useful sometimes, though, e.g. setting up return values, declarations, or parameters.
     */
    fun withVar(key: Key, expr: Expr<*>): Context {
        if (expr is VoidExpression) {
            throw IllegalArgumentException("VoidExpressions cannot be assigned!")
        }

        val castVar = expr.performACastTo(key.ind, false)
        return Context(variables + (key to castVar), heap, resolvesTo)
    }

    /**
     * Performs a cast if necessary.
     */
    fun withResolvedVar(element: PsiElement, expr: Expr<*>): Context {
        return withResolvedVar(element.toKey(), expr)
    }

    /**
     * Performs a cast if necessary.
     */
    fun withResolvedVar(key: Key, expr: Expr<*>): Context {
        val castExpr = expr.performACastTo(key.ind, false)

        return Context(variables.mapValues { (_, oldExpr) ->
            oldExpr.rebuildTree(variableExpressionReplacer {
                if (it.key == key) castExpr else null
            })
        }, heap, resolvesTo)
    }

    fun withHeap(key: Key.HeapKey, context: Context): Context {
        return Context(variables, heap + (key to context), resolvesTo)
    }

    /**
     * Stacks the later context on top of this one.
     *
     * That is, prioritise the later context and fall back to this one if the key doesn't exist.
     *
     * Conversely, for `Method` keys, this context is prioritised over the later context.
     */
    fun stack(later: Context): Context {
        val laterResolvedWithMe = later.variables.mapValues { (_, expr) ->
            expr.rebuildTree(variableExpressionReplacer { variables[it.key] })
        }

        val meResolvedWithLater = variables.mapValues { (_, expr) ->
            expr.rebuildTree(variableExpressionReplacer { later.variables[it.key] })
        }

        val newVariables = mutableMapOf<Key, Expr<*>>()

        // For normal keys, later takes priority and gets to override.
        newVariables.putAll(meResolvedWithLater.filter { !it.key.isReturnKey() })
        newVariables.putAll(laterResolvedWithMe.filter { !it.key.isReturnKey() })

        // For method keys, this context takes priority.
        newVariables.putAll(laterResolvedWithMe.filter { it.key.isReturnKey() })
        newVariables.putAll(meResolvedWithLater.filter { it.key.isReturnKey() })

        return Context(
            newVariables,
            heap = heap + later.heap,
            resolvesTo = resolvesTo
        )
    }

    /**
     * Returns a new context with the provided context (heh) of what 'this' is.
     */
    fun provideQualifier(qualifier: Expr<*>): Context {
        return Context(variables.mapValues { (_, oldExpr) ->
            oldExpr.rebuildTree(variableExpressionReplacer { variableExpr ->
                // In the future we'll also have to replace `this` with the qualifier.
                if (variableExpr.key is Key.FieldKey) {
                    // OK, so this is quite fun.
                    // Sort of nested replacements. For everything that needed a qualifier, we build
                    // it a custom qualifier expression, resolved correctly.
                    qualifier.getField(this, variableExpr.key)
                } else {
                    null
                }
            })
        }, heap, resolvesTo)
    }

    private fun variableExpressionReplacer(
        replacement: (VariableExpression<*>) -> Expr<*>?
    ): ExprTreeRebuilder.Replacer {
        return object : ExprTreeRebuilder.Replacer {
            override fun <T : Any> replace(expr: Expr<T>): Expr<T> {
                if (expr is VariableExpression) {
                    val resolved = replacement(expr)
                    if (resolved != null) {
                        assert(resolved.ind == expr.ind) {
                            "(${resolved.ind} != ${expr.ind}) ${resolved.dStr()} does not match ${expr.dStr()}"
                        }

                        @Suppress("UNCHECKED_CAST") // Safety: Verified indicators match.
                        return resolved as Expr<T>
                    }
                }

                return expr
            }
        }
    }
}