package com.github.oberdiah.deepcomplexity

import com.google.gson.Gson
import com.google.gson.annotations.SerializedName
import java.net.URI
import java.net.http.HttpClient
import java.net.http.HttpRequest
import java.net.http.HttpResponse

object AITestDataGenerator {
    private data class Message(val role: String, val content: String)
    private data class RequestPayload(
        val model: String,
        @SerializedName("max_tokens") val maxTokens: Int,
        val messages: List<Message>,
        val system: String? = null,
    )

    private data class ContentItem(val type: String, val text: String)
    private data class Usage(
        @SerializedName("input_tokens") val inputTokens: Int,
        @SerializedName("cache_creation_input_tokens") val cacheCreationInputTokens: Int,
        @SerializedName("cache_read_input_tokens") val cacheReadInputTokens: Int,
        @SerializedName("output_tokens") val outputTokens: Int,
        @SerializedName("service_tier") val serviceTier: String
    )

    private data class ResponsePayload(
        val id: String,
        val type: String,
        val role: String,
        val model: String,
        val content: List<ContentItem>,
        @SerializedName("stop_reason") val stopReason: String,
        @SerializedName("stop_sequence") val stopSequence: String?,
        val usage: Usage
    )

    lateinit var apiKey: String

    @JvmStatic
    fun main(args: Array<String>) {
        apiKey = System.getenv("ANTHROPIC_API_KEY")

        generateTestData()
    }

    fun generateTestData() {
        val promptPath = "src/test/testData/system_prompt.txt"
        val systemPrompt = java.io.File(promptPath).takeIf { it.exists() }
            ?.readText()
            ?: throw IllegalStateException("System prompt file not found at $promptPath")

        val descriptionsList = listOf(
            "Variable tracking through arithmetic, ensuring that x - x = 0, 2x - x = x, etc.",
            "Short arithmetic specifically on wrapping behaviour",
            "Long chained if statements with complex conditions and nested logic",
            "Early return statements and how that interacts with method calls",
            "Methods with many parameters, and the order of parameter evaluation",
            "Methods with side effects, especially when parameters are mutable",
            "Operation evaluation order, especially with short-circuiting logic",
            "Many variable declarations and tracking their values between them",
            "Tracking variable constraints in if statements forcing the values of later checks",
            "Class methods, fields, and modification by reference",
        )

        for (testDescription in descriptionsList) {
            val instruction = "20 Tests focused on: $testDescription"

//            val testName = doRequest(
//                "You are an AI assistant that writes good Java class names for test classes.",
//                "Generate a concise, descriptive name for a test class that will contain tests for: $testDescription",
//                maxTokens = 100
//            )

            println("Requesting: $instruction")

            val generatedMethods = doRequest(
                systemPrompt,
                instruction,
                maxTokens = 7500
            )

            val methods = generatedMethods.lines()
                .filter { !it.startsWith("// Expected") && !it.contains("```") }
                .joinToString("\n") { "\t$it" }

            println("Generated Methods:\n$methods")

            val testDataFile = "src/test/java/testdata/ai/AutoGenerated.java"

            // Append the generated methods to the bottom of AutoGenerated.java, replacing the last line ( '}' )
            // We need to add that line back after appending
            val autoGeneratedFile = java.io.File(testDataFile)
            if (!autoGeneratedFile.exists()) {
                throw IllegalStateException("AutoGenerated.java file not found at $testDataFile")
            }

            val content = autoGeneratedFile.readText()
            val newContent = content.substringBeforeLast("}") + "\n$methods\n}"
            autoGeneratedFile.writeText(newContent)
            println("Test data generated and written to $testDataFile")
        }
    }

    private fun doRequest(systemPrompt: String, instruction: String, maxTokens: Int): String {
        val payload = RequestPayload(
            model = "claude-sonnet-4-20250514",
            maxTokens = 7500,
            system = systemPrompt,
            messages = listOf(
                Message("user", instruction)
            )
        )

        val request = HttpRequest.newBuilder()
            .uri(URI("https://api.anthropic.com/v1/messages"))
            .header("x-api-key", apiKey)
            .header("anthropic-version", "2023-06-01")
            .header("content-type", "application/json")
            .POST(HttpRequest.BodyPublishers.ofString(Gson().toJson(payload)))
            .build()

        val response = HttpClient.newBuilder()
            .build()
            .send(request, HttpResponse.BodyHandlers.ofString())

        val responseData = Gson().fromJson(response.body(), ResponsePayload::class.java)

        return responseData.content.firstOrNull()?.text ?: "No content"
    }
}